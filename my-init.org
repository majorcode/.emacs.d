#+STARTUP: overview

* Some notes
  C-c '    will open an editor, repeat C-c ' to return indented code 
  <sTAB    will create an Org mode source block
  C-x C-e  to execute previous code block


* Temporary Snippets
  These are things that are often added/removed for a session

  #+BEGIN_SRC emacs-lisp
  (set-face-attribute 'default nil :height 130)
  #+END_SRC


* Interfce Tweaks
  Let's get this strait. I don't work on January 8th.

  #+BEGIN_SRC emacs-lisp
    (setq inhibit-startup-message t)
    (setq column-number-mode t)
    (tool-bar-mode -1)
    (scroll-bar-mode -1)
    (fset 'yes-or-no-p 'y-or-n-p)
    (global-set-key (kbd "<f5>") 'revert-buffer)
    (defalias 'list-buffers 'ibuffer)
    ;(defalias 'list-buffers 'ibuffer-other-window)
    (add-to-list 'default-frame-alist '(height . 50))
    (add-to-list 'default-frame-alist '(width . 80))
  #+END_SRC


* Theme

  #+BEGIN_SRC emacs-lisp
    (use-package zenburn-theme
      :ensure t
      :config (load-theme 'zenburn t))
  #+END_SRC


* Move Temp & Backup Files
  Put autosave and backup files in a safe, non-intrusive location.
  #+BEGIN_SRC emacs-lisp
    (defvar backup-dir (expand-file-name "~/.emacs.d/backup/"))
    (defvar autosave-dir (expand-file-name "~/.emacs.d/autosave/"))
    (setq backup-directory-alist (list (cons ".*" backup-dir)))
    (setq auto-save-list-file-prefix autosave-dir)
    (setq auto-save-file-name-transforms `((".*" ,autosave-dir t)))
  #+END_SRC


* Try Package
  Allows you to try a package (run via 'try)

  #+BEGIN_SRC emacs-lisp
    (use-package try 
      :ensure t)
  #+END_SRC


* Which Key
  Displays keyboard help in the mini-buffer

  #+BEGIN_SRC emacs-lisp
    (use-package which-key
      :ensure t 
      :config
      (which-key-mode))
  #+END_SRC


* Org-mode Tweaks

  #+BEGIN_SRC emacs-lisp
    (use-package org-bullets
      :ensure t
      :config
      (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
  #+END_SRC

  
* Ido Setup
  Ido all the things!!!

  #+BEGIN_SRC emacs-lisp
    (setq ido-enable-flex-matching t)
    (setq ido-everywhere t)
    (ido-mode 1)
  #+END_SRC


* Ace Window Pakage
  This makes switching between windows more sane.

  #+BEGIN_SRC emacs-lisp
    (use-package ace-window
      :ensure t
      :init
      (global-set-key [remap other-window] 'ace-window)
      (custom-set-faces
       '(aw-leading-char-face
         ((t (:inherit ace-jump-face-foreground :height 3.0))))))
  #+END_SRC



* Swiper and Friends
  I don't know how people live in Emacs without these things.

  #+BEGIN_SRC emacs-lisp
    (use-package counsel
      :ensure t)

    (use-package swiper
      :ensure t
      :config
      (progn
        (ivy-mode 1)
        (setq ivy-use-virtual-buffers t)
        (global-set-key "\C-s" 'swiper)
        (global-set-key (kbd "C-c C-r") 'ivy-resume)
        (global-set-key (kbd "<f6>") 'ivy-resume)
        (global-set-key (kbd "M-x") 'counsel-M-x)
        (global-set-key (kbd "C-x C-f") 'counsel-find-file)
        (global-set-key (kbd "<f1> f") 'counsel-describe-function)
        (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
        (global-set-key (kbd "<f1> l") 'counsel-load-library)
        (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
        (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
        (global-set-key (kbd "C-c g") 'counsel-git)
        (global-set-key (kbd "C-c j") 'counsel-git-grep)
        (global-set-key (kbd "C-c k") 'counsel-ag)
        (global-set-key (kbd "C-x l") 'counsel-locate)
        (global-set-key (kbd "C-S-o") 'counsel-rhythmbox)
        (define-key read-expression-map (kbd "C-r") 'counsel-expression-history)))
  #+END_SRC


* Avy Package (char: <jump>)

  #+BEGIN_SRC emacs-lisp
    (use-package avy
      :ensure t
      :bind ("M-s" . avy-goto-char))
  #+END_SRC


* Auto-complete
  This is a really simple auto-complete based. Maybe soon, 
  try company-mode for a more complete package.

  #+BEGIN_SRC emacs-lisp
    (use-package auto-complete
      :ensure t
      :init
      (ac-config-default)
      (global-auto-complete-mode t))
  #+END_SRC


* Fly Check
  #+BEGIN_SRC emacs-lisp
    (use-package flycheck
      :ensure t
      :init
      (global-flycheck-mode t)
      :config
      (setq-default flycheck-disabled-checkers '(emacs-lisp-checkdoc)))
  #+END_SRC


* YASnippets
  #+BEGIN_SRC emacs-lisp
    (use-package yasnippet
      :ensure t
      :init
      (yas-global-mode 1))
  #+END_SRC




